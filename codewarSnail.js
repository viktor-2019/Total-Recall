//  Завдання: розгорнути квадратний масив n x n методом "слимачка"
//  Заодно напишемо кілька елементарних програмок для:

//  ======== транспонування матриці
const transp = arr => arr.length 
  ? arr[0].map((_, i) => arr.map((_, j) => arr[j][i])) 
  : [];

//  ========= повороту квадратної матриці на 90 градусів за годинниковою стрілкою
const сlockwiseArray = ar => ar.length 
  ? ar[0].map((_, i) => ar.map((_, j) => ar[ar.length - 1 - j][i])) 
  : [];
//  ========= повороту матриці на 90 градусів проти годинникової стрілки
//  оскільки в процесі ми "ріжемо матрицю" і вона перестає бути "квадратною"
//  використовуємо саме в цьому випадку індекс виду  [j][ar[0].length -1 -i]  
//  У випадку довільних матриць ррозмірами m x n треба використовувати вирази 
//  виду [j][n-1-i]

const againstClockArray = ar => ar.length 
  ? ar[0].map((_, i) => ar.map((_, j) => ar[j][ar[0].length - 1 - i])) 
  : [];

//  +++++++++ тестовий масив ++++++++
  let sqq = [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]];
  
// ======== "равлик" з використнням транспонування матриці ========
const snail = arr => arr.length 
  ? [...arr[0], ...snail(transp(arr.slice(1)).reverse())] 
  : [];

// ======== "равлик" з використнням повороту матриці проти год. стрілки ========
const sn = arr => arr.length 
  ? [...arr[0], ...sn(againstClockArray(arr.slice(1)))] 
  : [];
  
  console.log('snail: ', snail(sqq));
  console.log('sn: ', sn(sqq));
  